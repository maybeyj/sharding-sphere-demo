spring:
  shardingsphere:
    #数据源
    datasource:
      names: test1,test2
      test1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/test_1
        username: root
        password: abc123
      test2:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/test_2
        username: root
        password: abc123
    #分片
    sharding:
      tables:
        user:
          #由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。
          #缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
          actual-data-nodes: test$->{1..2}.user_$->{1..2}
          key-generator:
            #自增列名称，缺省表示不使用自增主键生成器
            column: id
            #自增列值生成器类型，缺省表示使用默认自增列值生成器。可使用用户自定义的列值生成器或选择内置类型：SNOWFLAKE/UUID
            type: SNOWFLAKE
          table-strategy:
            inline:
              #分表列名称
              sharding-column: id
              #分表算法行表达式，需符合groovy语法
              #偶数进表1，奇数进表2
              algorithm-expression: user_$->{id%2+1}
          database-strategy:
            inline:
              #分片列名称
              sharding-column: uuid
              #分片算法行表达式，需符合groovy语法
              #偶数进库1，奇数进库2
              algorithm-expression: test$->{uuid%2+1}
    props:
      sql:
        show: true